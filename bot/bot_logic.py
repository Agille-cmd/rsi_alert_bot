from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from bot.user_data import (
    get_pairs,
    add_pair,
    remove_pair,
    get_available_pairs,
    add_all_pairs,
    remove_all_pairs,
    get_user_settings,
    update_user_settings
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìä –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RSI

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/settings - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/set_rsi [–ø–µ—Ä–∏–æ–¥] - –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ RSI (5-30)
/add [–ø–∞—Ä–∞] - –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É
/remove [–ø–∞—Ä–∞] - —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É
/list - –º–æ–∏ –ø–∞—Ä—ã
/pairs - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
/add_all - –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã
/remove_all - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã
"""
    await update.message.reply_text(help_text)

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    await update.message.reply_text(
        f"‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ RSI: {settings['rsi_period']}\n\n"
        f"–ò–∑–º–µ–Ω–∏—Ç—å: /set_rsi [–Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥]"
    )

async def set_rsi_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ RSI (–Ω–∞–ø—Ä–∏–º–µ—Ä: /set_rsi 21)")
            return
        
        period = int(context.args[0])
        if not 5 <= period <= 30:
            await update.message.reply_text("–ü–µ—Ä–∏–æ–¥ RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 5 –∏ 30")
            return
        
        user_id = update.effective_user.id
        settings = get_user_settings(user_id)
        settings['rsi_period'] = period
        update_user_settings(user_id, settings)
        
        await update.message.reply_text(f"‚úÖ –ü–µ—Ä–∏–æ–¥ RSI –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {period}")
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 30")

async def show_available_pairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pairs = get_available_pairs()
    await update.message.reply_text("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã:\n\n" + "\n".join(pairs))

async def add_pair_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add BTC/USDT)")
        return
    
    pair = context.args[0].upper()
    if add_pair(update.effective_user.id, pair):
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞: {pair}")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É {pair}\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ü–∞—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n"
            "- –ü–∞—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            "–°–ø–∏—Å–æ–∫ –ø–∞—Ä: /pairs"
        )

async def remove_pair_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /remove BTC/USDT)")
        return
    
    pair = context.args[0].upper()
    if remove_pair(update.effective_user.id, pair):
        await update.message.reply_text(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞: {pair}")
    else:
        await update.message.reply_text(f"–ü–∞—Ä–∞ {pair} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ")

async def list_pairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pairs = get_pairs(update.effective_user.id)
    if not pairs:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä")
    else:
        await update.message.reply_text("üìã –í–∞—à–∏ –ø–∞—Ä—ã:\n" + "\n".join(pairs))

async def add_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if add_all_pairs(update.effective_user.id):
        count = len(get_available_pairs())
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ {count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—ã")

async def remove_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_remove_all")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_remove_all")]
    ]
    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–∞—Ä—ã?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_remove_all":
        remove_all_pairs(query.from_user.id)
        await query.edit_message_text("‚úÖ –í—Å–µ –ø–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
    else:
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

def run_bot(token):
    app = Application.builder().token(token).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("settings", show_settings))
    app.add_handler(CommandHandler("set_rsi", set_rsi_period))
    app.add_handler(CommandHandler("add", add_pair_handler))
    app.add_handler(CommandHandler("remove", remove_pair_handler))
    app.add_handler(CommandHandler("list", list_pairs))
    app.add_handler(CommandHandler("pairs", show_available_pairs))
    app.add_handler(CommandHandler("add_all", add_all))
    app.add_handler(CommandHandler("remove_all", remove_all))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    app.run_polling()